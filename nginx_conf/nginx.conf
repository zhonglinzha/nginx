
#user  nobody;
worker_processes  4; #开启的进程数，一个master 三个worker

error_log  logs/error.log  notice; #错误日志路径，日志级别

pid        logs/nginx.pid;

worker_rlimit_nofile 65535; #性能优化-优化worker进程最大打开文件数worker_rlimit_nofile 65535;

events {
    worker_connections  2048; #单个进程允许的客户端最大连接数
    multi_accept on; #告诉nginx收到一个新连接通知后接受尽可能多的连接 如果nginx使用kqueue连接方法，那么这条指令会被忽略
    use epoll; #如果你使用Linux 2.6+，你应该使用epoll。如果你使用*BSD，你应该使用kqueue
}

http {
    server_tokens on; #隐藏版本号
    include       mime.types;
    default_type  application/octet-stream;



    log_format  main  '$request_time - $upstream_response_time - $upstream_addr - $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"  "$request_body"';

    log_format  main2 '$request_time - $upstream_response_time - $upstream_addr - $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"  "$request_body"';

    log_format postdata '$request_body';

    client_max_body_size 2000m; #Nginx：413 Request Entity Too Large解决 上传视频和文件的时候容易出错 设置的大一点默认才20m

    access_log  logs/access.log  main;

    #性能优化-开启高效文件传输模式sendfile
    #设置为on表示启动高效传输文件的模式。sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据。
    #如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个buffer，用read函数把数据从磁盘读到cache，
    #再从cache读取到用户空间的buffer，再用write函数把数据从用户空间的buffer写入到内核的buffer，
    #最后到tcp socket。开启这个参数后可以让数据不用经过用户buffer。
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 256k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/xml text/plain application/x-javascript text/css application/xml application/json;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";
	gzip_proxied any; # default is "off" (no compression on proxied requests) 
                      #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。

	server_name_in_redirect off;

	upstream backend8080 {
    	ip_hash;
	    server 127.0.0.1:8080   max_fails=3 fail_timeout=20s;  #正式服01 127.0.0.1:8080    master 主
        server 172.17.16.6:8080 max_fails=3 fail_timeout=20s;  #正式服02 115.159.0.19:8080 slave  从
    }
    upstream debug9090 {
        server 172.17.16.6:9090 max_fails=3 fail_timeout=20s;  #正式服的专用线上远程测试 03 115.159.0.19:9090 slave 从
    }


    upstream traveladminfrontend8080 { #运营服前端8080
        server 172.17.0.7:8080   max_fails=3 fail_timeout=20s; #正式运营服
    }
    upstream traveladminbackend7001 { #运营服后端
        server 172.17.0.7:7001   max_fails=3 fail_timeout=20s; #正式运营服
    }
    upstream traveladmintest3000 { #运营服后端测试
        server 172.17.0.7:3000   max_fails=3 fail_timeout=20s; #测试的运营服
    }


    upstream traveladminbackendtest7001 { #运营服后端在测试服那里
        server 172.17.0.13:7001   max_fails=3 fail_timeout=20s; #测试的运营服
    }

    include          vhosts/*.conf;
}
