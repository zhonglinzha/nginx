
#user  nobody;
worker_processes  4; #开启的进程数，一个master 4个worker  一般和CPU的核数设置一致；高并发可以和CPU核数2倍
#worker_cpu_affinity 0101 1010;   #优化nginx服务进程均匀分配到不同CPU进行处理  
                                  #默认情况下可能多个进程跑在一个CPU上或某一核上，导致Nginx进程使用硬件资源不均匀，
                                  #此次优化是尽可能地分配不同的Nginx进程给不同的CPU处理

error_log  logs/error.log  notice; #错误日志路径，日志级别

pid        logs/nginx.pid;

worker_rlimit_nofile 65535; #性能优化-优化worker进程最大打开文件数worker_rlimit_nofile 65535; 这个是否受操作系统限制

events {
    worker_connections  2048; #单个进程允许的客户端最大连接数  优化worker进程连接数量能力 ulimit -a  操作系统会有限制   
                              #系统的最大打开文件数>= worker_connections*worker_process
    multi_accept on; #告诉nginx收到一个新连接通知后接受尽可能多的连接 如果nginx使用kqueue连接方法，那么这条指令会被忽略

    use epoll; #如果你使用Linux 2.6+，你应该使用epoll。如果你使用*BSD，你应该使用kqueue
               #使用epoll事件驱动，因为epoll的性能相比其他事件驱动要好很多
}

http {
    server_tokens off; #隐藏版本号 在http 模块当中配置
    include       mime.types;
    default_type  application/octet-stream;



    log_format  main  '$request_time - $upstream_response_time - $upstream_addr - $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"  "$request_body"';

    log_format  main2 '$request_time - $upstream_response_time - $upstream_addr - $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"  "$request_body"';

    log_format postdata '$request_body';

    client_max_body_size 2000m; #Nginx：413 Request Entity Too Large解决 上传视频和文件的时候容易出错 设置的大一点默认才1m

    access_log  logs/access.log  main;

    #性能优化-开启高效文件传输模式sendfile
    #设置为on表示启动高效传输文件的模式。sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据。
    #如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个buffer，用read函数把数据从磁盘读到cache，
    #再从cache读取到用户空间的buffer，再用write函数把数据从用户空间的buffer写入到内核的buffer，
    #最后到tcp socket。开启这个参数后可以让数据不用经过用户buffer。
    sendfile        on;  #https://www.jianshu.com/p/cac0a92b9530
    #tcp_nopush     on;


    # HTTP 是一种无状态协议，客户端向服务器发送一个 TCP 请求，服务端响应完毕后断开连接。
    # 如果客户端向服务器发送多个请求，每个请求都要建立各自独立的连接以传输数据。
    # HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 
    # 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。
    # KeepAlive 在一段时间内保持打开状态，它们会在这段时间内占用资源。占用过多就会影响性能。
    # Nginx 使用 keepalive_timeout 来指定 KeepAlive 的超时时间（timeout）。
    # 指定每个 TCP 连接最多可以保持多长时间。Nginx 的默认值是 75 秒，有些浏览器最多只保持 60 秒，
    # 所以可以设定为 60 秒。若将它设置为 0，就禁止了 keepalive 连接。
    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip on; #开关

    #nginx默认安装ngx_http_gzip_module,采用的是chunked方式的动态压缩，
    #静态压缩需要使用http_gzip_static_module这个模块，进行pre-compress。
    #模块 ngx_http_gzip_static_module 允许发送以“.gz”作为文件扩展名的预压缩文件，
    #以替代发送普通文件。需要指定 --with-http_gzip_static_module编译选项：
    # 配合 webpack compression-webpack-plugin 插件 实现
    gzip_static on;

    gzip_min_length  1k; # 超过1k就压缩
    gzip_buffers     4 256k; # 压缩缓冲区
    gzip_http_version 1.0; #压缩版本
    gzip_comp_level 2; #压缩级别  2比较合适
    gzip_types text/xml text/plain application/x-javascript text/css application/xml application/json; #压缩类型 到 mime.types 里找
    gzip_vary off;
    gzip_disable "MSIE [1-6]\."; #ie不压缩
	gzip_proxied any; # default is "off" (no compression on proxied requests) 
                      #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。

	server_name_in_redirect off;

	upstream backend8080 {
    	ip_hash;
	    server 127.0.0.1:8080   max_fails=3 fail_timeout=20s;  #正式服01 127.0.0.1:8080    master 主
                                #如果在30s内连续三次产生3次失败，就认为这个服务器在之后的30s是无效(down)状态
        server 172.17.16.6:8080 max_fails=3 fail_timeout=20s;  #正式服02 115.159.0.19:8080 slave  从
    }
    upstream debug9090 {
        server 172.17.16.6:9090 max_fails=3 fail_timeout=20s;  #正式服的专用线上远程测试 03 115.159.0.19:9090 slave 从
    }


    upstream traveladminfrontend8080 { #运营服前端8080
        server 172.17.0.7:8080   max_fails=3 fail_timeout=20s; #正式运营服
    }
    upstream traveladminbackend7001 { #运营服后端
        server 172.17.0.7:7001   max_fails=3 fail_timeout=20s; #正式运营服
    }
    upstream traveladmintest3000 { #运营服后端测试
        server 172.17.0.7:3000   max_fails=3 fail_timeout=20s; #测试的运营服
    }


    upstream traveladminbackendtest7001 { #运营服后端在测试服那里
        server 172.17.0.13:7001   max_fails=3 fail_timeout=20s; #测试的运营服
    }

    include          vhosts/*.conf;
}
